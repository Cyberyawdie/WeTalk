@page "/chat"
@page "/chat/{FirstName}"
@using WeTalk.Data
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@implements IAsyncDisposable

<PageTitle>Chat With @FirstName</PageTitle>
<AuthorizeView>
    <Authorized>


        <div class="container">
            <div class="row clearfix">
                <div class="col-lg-12">
                    <div class="card chat-app">

                        <div class="chat">
                            <div class="chat-header clearfix">
                                <div class="row">
                                    <div class="col-lg-6">
                                        <div class="chat-about">
                                            <h6 class="m-b-0">@FirstName</h6>
                                            @* <small>Last seen: 2 hours ago</small>*@
                                        </div>
                                    </div>

                                </div>
                            </div>
                            <div class="chat-history">
                                <ul class="m-b-0">
                                    @*  <li class="clearfix">
                                        <div class="message-data text-right">
                                        <span class="message-data-time">10:10 AM, Today</span>
                                        <img src="https://bootdey.com/img/Content/avatar/avatar7.png" alt="avatar">
                                        </div>
                                        <div class="message other-message float-right"> Hi Aiden, how are you? How is the project coming along? </div>
                                        </li>*@
                                    @foreach (var message in messages)
                                    {
                                        <li class="clearfix">
                                            <div class="@(message.UserId == context.User.Identity?.Name ? "message-data float-right" : "message-data")">

                                                <span class="message-data-time">@message.Time.ToString("ddd, hh:mm:ss tt")</span>
                                            </div>
                                            <div class="@(message.UserId == context.User.Identity?.Name ? "message other-message float-right" : "message my-message")">@message.UserId : @message.Message</div>
                                        </li>
                                    }

                                </ul>
                            </div>
                            <div class="chat-message clearfix">
                                <div class="input-group mb-0">
                                   
                                        <input @bind="messageInput" type="text" class="form-control" placeholder="Enter text here...">
                                        <div class="input-group-prepend">
                                            <span class="input-group-text"><button @onclick="Send" disabled="@(!IsConnected)">Send</button></span>

                                        </div>
                                    
                                </div>
                                 
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>


    </Authorized>
</AuthorizeView>

@code {
    private HubConnection? hubConnection;
    private List<MessageModel> messages = new List<MessageModel>();

    private string? messageInput;

    protected override async Task OnInitializedAsync()
    {

        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
       {

           messages.Add(new MessageModel(user, message));
           StateHasChanged();
       });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var currUser = authstate.User;
        var name = currUser.Identity?.Name;
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", name, messageInput);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
    [Parameter]
    public string? FirstName { get; set; }
}

